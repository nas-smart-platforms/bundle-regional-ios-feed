// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Feed
import API
import Combine
import EventKit
import EventKitUI
import Foundation
import Kingfisher
import Reachability
import Security
import Swift
import UIKit
import UserNotifications
import WebKit
import os.log
import os
extension ChannelListViewController {
  public func refreshView()
}
public enum ChannelError : Swift.Error {
  case parsing(description: Swift.String)
  case network(description: Swift.String)
}
@objc @_inheritsConvenienceInitializers @IBDesignable final public class ChatViewController : UIKit.UIViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override final public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ChatViewController : UIKit.UITableViewDataSource {
  @objc final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc final public func tableView(_ tableView: UIKit.UITableView, contextMenuConfigurationForRowAt indexPath: Foundation.IndexPath, point: CoreGraphics.CGPoint) -> UIKit.UIContextMenuConfiguration?
}
extension ChatViewController : EventKitUI.EKEventEditViewDelegate {
  @objc final public func eventEditViewController(_ controller: EventKitUI.EKEventEditViewController, didCompleteWith action: EventKitUI.EKEventEditViewAction)
}
extension ChatViewController : UIKit.UITableViewDelegate {
}
extension ChatViewController : UIKit.UINavigationControllerDelegate, UIKit.UIImagePickerControllerDelegate {
  @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension Date {
  public var dateComponents: Foundation.DateComponents {
    get
  }
}
extension UIViewController {
  public func topViewController() -> UIKit.UIViewController
}
extension UIView {
  public enum GradientDirection {
    case leftToRight
    case topToBottom
    case bottomLeftToTopRight
    case topRightToBottomLeft
    public static func == (a: UIKit.UIView.GradientDirection, b: UIKit.UIView.GradientDirection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc @IBInspectable dynamic public var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  public func pinToSuperviewEdges()
  public func pinToViewEdges(view: UIKit.UIView)
  public func centerInSuperview()
  public func centerInView(_ view: UIKit.UIView)
  public func pinToLayoutGuide(guide: UIKit.UILayoutGuide)
  public func layout(using constraints: [UIKit.NSLayoutConstraint])
  public func loadNib() -> UIKit.UIView
}
public typealias FetchTokenHandler = (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void
public protocol FeedDelegate : AnyObject {
  func fetchCurrentAccessToken(_ completion: @escaping Feed.FetchTokenHandler)
  func handle(error: Swift.Error, completion: (() -> Swift.Void)?)
}
extension Group : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ChannelListViewModel : Foundation.ObservableObject {
  @objc deinit
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
public protocol ViewControllerConfigurable {
  func configure(viewController: Feed.ViewControllerProtocol)
}
public protocol FeedHandling : Feed.FeedConfigurable, Feed.FeedIngress {
}
public protocol FeedConfigurable {
  static var apiBaseURL: Foundation.URL { get set }
  static var loginBaseURL: Foundation.URL { get set }
  static var realm: Swift.String { get set }
}
public protocol FeedIngress {
  func handleRemoteNotification(_ userInfo: [Swift.AnyHashable : Any], silent: Swift.Bool, in viewController: UIKit.UIViewController?)
  func presentLineNotificationSettings(for line: Swift.String, in targetViewController: UIKit.UIViewController, completion: @escaping (Swift.Bool) -> Swift.Void)
  func presentElevatorNotificationSettings(for elevator: Swift.String?, in targetViewController: UIKit.UIViewController, completion: @escaping (Swift.Bool) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class FeedSDK : Feed.FeedConfigurable {
  public static var current: Feed.FeedSDK
  weak final public var delegate: Feed.FeedDelegate?
  public static var apiBaseURL: Foundation.URL {
    get
    set
  }
  public static var loginBaseURL: Foundation.URL {
    get
    set
  }
  public static var realm: Swift.String {
    get
    set
  }
  @objc deinit
}
extension FeedSDK : Feed.FeedIngress {
  final public func presentLineNotificationSettings(for line: Swift.String, in targetViewController: UIKit.UIViewController, completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func presentElevatorNotificationSettings(for elevator: Swift.String? = nil, in targetViewController: UIKit.UIViewController, completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func handleRemoteNotification(_ userInfo: [Swift.AnyHashable : Any], silent: Swift.Bool = false, in viewController: UIKit.UIViewController? = nil)
}
public protocol ViewControllerProtocol : AnyObject {
  var viewController: UIKit.UIViewController { get }
  func refreshView()
}
extension ViewControllerProtocol where Self : UIKit.UIViewController {
  public var viewController: UIKit.UIViewController {
    get
  }
  public func refreshView()
}
@objc @_inheritsConvenienceInitializers public class ChannelListViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ChannelListViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension String {
  public init(deviceToken: Foundation.Data)
}
extension ChatViewController {
  #warning("wip & buggy!")
}
public enum SemanticColors : Swift.String, Swift.CaseIterable {
  case undefined
  case alertBackground
  case inlineLink
  case ticketing
  case statusProblem
  case chatBackgroundOther
  case chatTextMe
  case divider
  case textInput
  case textTertiary
  case textPrimary
  case textSecondary
  case chatBackgroundMe
  case chatTextOther
  case statusOk
  case bus
  case rBahn
  case sBahn
  case tram
  case u1
  case u2
  case u3
  case statusDelay
  case statusWarning
  case tintPrimary
  case badgeChat
  case tintSecondary
  case fallbackSystemBackground
  case textLight
  public var uiColor: UIKit.UIColor {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [Feed.SemanticColors]
  public static var allCases: [Feed.SemanticColors] {
    get
  }
}
extension UIColor {
  public static var undefined: UIKit.UIColor
  public static var alertBackground: UIKit.UIColor
  public static var inlineLink: UIKit.UIColor
  public static var ticketing: UIKit.UIColor
  public static var statusProblem: UIKit.UIColor
  public static var chatBackgroundOther: UIKit.UIColor
  public static var chatTextMe: UIKit.UIColor
  public static var divider: UIKit.UIColor
  public static var textInput: UIKit.UIColor
  public static var textTertiary: UIKit.UIColor
  public static var textPrimary: UIKit.UIColor
  public static var textSecondary: UIKit.UIColor
  public static var chatBackgroundMe: UIKit.UIColor
  public static var chatTextOther: UIKit.UIColor
  public static var statusOk: UIKit.UIColor
  public static var bus: UIKit.UIColor
  public static var rBahn: UIKit.UIColor
  public static var sBahn: UIKit.UIColor
  public static var tram: UIKit.UIColor
  public static var u1: UIKit.UIColor
  public static var u2: UIKit.UIColor
  public static var u3: UIKit.UIColor
  public static var statusDelay: UIKit.UIColor
  public static var statusWarning: UIKit.UIColor
  public static var tintPrimary: UIKit.UIColor
  public static var badgeChat: UIKit.UIColor
  public static var tintSecondary: UIKit.UIColor
  public static var fallbackSystemBackground: UIKit.UIColor
  public static var textLight: UIKit.UIColor
}
extension Feed.ChannelListViewController : Feed.ViewControllerProtocol {}
extension UIKit.UIView.GradientDirection : Swift.Equatable {}
extension UIKit.UIView.GradientDirection : Swift.Hashable {}
extension Feed.SemanticColors : Swift.Equatable {}
extension Feed.SemanticColors : Swift.Hashable {}
extension Feed.SemanticColors : Swift.RawRepresentable {}
